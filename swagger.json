{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.1",
    "title": "Trellolo ",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "trellolo.com",
  "basePath": "/api",
  "tags": [
    {
      "name":"User"
    },
    {
      "name": "Project"
    },
    {
      "name": "Board"
    },
    {
      "name": "Invite"
    },
    {
      "name": "Column"
    },
    {"name":"BoardColumn"},

    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/projects": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a new Project",
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Project object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update an existing Project",
        "description": "",
        "operationId": "updateProject",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get User Project list",
        "description": "Multiple status values can be provided with comma separated strings",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Finds Project by id",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of project that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/projects/latest":{
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project",
        "description": "return last modified project",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {

          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/projects/{projectId}/boards":{
      "get": {
        "tags": [
          "Project",
          "Board"
        ],
        "summary": "Get Project",
        "description": "return project boards",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of project that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Board"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/boards": {
      "post": {
        "tags": [
          "Board"
        ],
        "summary": "Create a new Board",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Board object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Board"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Forbidden"
          },
          "403": {
            "description": "Access to this project Forbidden"
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "security": [
          {

          }
        ]
      },
      "get": {
        "tags": [
          "Board"
        ],
        "summary": "Get User Board list",
        "description": "Multiple status values can be provided with comma separated strings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Board"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {

          }
        ]
      }
    },
    "/boards/column":{
      "post": {
        "tags": [
          "BoardColumn"
        ],
        "summary": "Create a new BoardColumn",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BoardColumn object that needs to be added to the Board",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BoardColumn"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Forbidden"
          },
          "403": {
            "description": "Access to this project Forbidden"
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "security": [
          {

          }
        ]
      }
    },
    "/boards/{boardId}/columns":{
      "get": {
        "tags": [
          "BoardColumn"
        ],
        "summary": "Get Board BoardColumn list",
        "description": "Multiple status values can be provided with comma separated strings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "ID of Board that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BoardColumn"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {

          }
        ]
      }
    },
    "/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "avatar",
            "type": "file",
            "description": "The file to upload."
          },
          {
            "in": "formData",
            "name": "email",
            "type": "string",
            "required": true,
            "description": "Description of file contents."
          },
          {
            "in": "formData",
            "name": "password",
            "type": "string",
            "required": true,
            "description": "Description of file contents."
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "required": false,
            "description": "Description of file contents."
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/invite":{
      "post": {
        "tags": [
          "Invite"
        ],
        "summary": "Create a new Invite",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Invite fields",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteRequest"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "Get all user invites",
        "description": "Get all user invites",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invite"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/invite/{inviteId}":{
      "delete": {
        "tags": [
          "Invite"
        ],
        "summary": "Delete selected invite",
        "description": "Delete selected invite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "ID of Invite that needs to be deleted",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {

          }
        ]
      }
    },
    "/invite/{inviteId}/accept":{
      "post": {
        "tags": [
          "Invite"
        ],
        "summary": "Accept selected invite",
        "description": "Accept selected invite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "ID of Invite that needs to be accepted",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {

          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://trellolo.com/auth/local",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "base_auth": {
      "type": "basic"
    }
  },
  "definitions": {

    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Project":{
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "title":{
          "type": "string"
        },
        "description":{
          "type": "string"
        },
        "icon":{
          "type": "string"
        },
        "users":{
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        }
      }
    },
    "InviteRequest":{
      "required": [
        "email",
        "projectId"
      ],
      "type": "object",
      "properties": {
        "email":{
          "type": "string",
          "format": "email"
        },
        "message":{
          "type": "string",
          "minLength": "2",
          "maxLength": "200"
        },
        "projectId":{
          "type": "integer"
        }
      }
    },"Invite":{
      "required": [
        "projectId"
      ],
      "type": "object",
      "properties": {
        "userTo":{
          "$ref": "#/definitions/User"
        },
        "userFrom":{
          "$ref": "#/definitions/User"
        },
        "message": {
          "type": "string",
          "minLength": "2",
          "maxLength": "200"
        },
        "projectId":{
          "type": "integer"
        }
      }
    },
    "BoardColumn":{
      "type": "object",
        "required": [
          "title",
          "boardId"
        ],
      "properties": {
        "_id":{
          "type": "integer"
        },
        "title":{
          "type": "string",
          "minLength": "2"
        },
        "position":{
          "type": "integer"
        },
        "boardId":{
          "type": "integer"
        }
      }
    },
    "Board":{
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name":{
          "type": "string"
        },
        "description":{
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref":"#/definitions/User"
          },
        "projectId": {
          "type": "integer"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}